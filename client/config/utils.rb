require 'digest'
require 'fileutils'

def app_id()
	return ENV['APP_ID']
end

def site_url()
	return ENV['SITE_URL']
end

# Generate generic hashed URL
def url_hash(url)
	real_path = "#{File.dirname(__FILE__)}/../#{$out_dir}/#{url}"
	if $http_path != ""
		http_prefix = "#{$http_path}/"
	end
	http_path = "#{http_prefix}#{url}"

	
	if not File.exist?(real_path)
		throw "Missing file: #{url}, looking for: #{real_path}"
	end

	rpn = Pathname.new(real_path)
	hpn = Pathname.new(http_path)

	h = file_url_hash(hpn, rpn, $images_dir, "#{$out_dir}/#{$images_dir}")

	return h[:path] if h
	nil
end

# Generate hashed URL for images
def new_image_url(url)

	real_path = "#{File.dirname(__FILE__)}/../#{$images_dir}#{url}"
	if $http_path != ""
		http_prefix = "#{$http_path}/"
	end
	http_path = "#{http_prefix}#{$images_dir}#{url}"
	if not File.exist?(real_path)
		throw "Missing file: #{url}, looking for: #{real_path}"
	end

	rpn = Pathname.new(real_path)
	hpn = Pathname.new(http_path)

	h = file_url_hash(hpn, rpn, $images_dir, "#{$out_dir}/#{$images_dir}")
end

# Get image URL from assets file (generated by CSS)
def image_url_from_assets_file(url)
	idx = @assets.index{ |a| a[0].end_with? url }
	if idx.nil?
		h=new_image_url(url)
		h[:path]
	else
		@assets[idx][1]
	end
end


# Copy/move file, adding digest to name. Return a ruby hash with new http path (compass format)
#
# Ex:
#   dir1/test.js -> dir2/test_MD5HASH.js
#
# Destination directory is obtained by word substitution from source directory name.
# If source and destination dir are the same, file is moved instead
#
# Input:
#   http path name: path of the file on the http server
#   real path name: path of the file on the local file system
#   src dir: name of the source path to be substituted in real path name
#   dst dir: name of the destination path to be substituted in real path name
#
def file_url_hash(hpn, rpn, src_dir, dst_dir)
	if not File.exists?(rpn)
		throw "Missing file: #{rpn} looking for: #{hpn}"
		return nil
	end

	bpn = Pathname.new(rpn.to_s.sub(src_dir, dst_dir))
	md5 = Digest::MD5.file(rpn).hexdigest

	new_http_path = "%s/%s_%s%s" % [hpn.dirname, hpn.basename(hpn.extname), md5, hpn.extname]
	new_real_path = "%s/%s_%s%s" % [bpn.dirname, bpn.basename(bpn.extname), md5, bpn.extname]

	FileUtils.makedirs(bpn.dirname) if not Dir.exists?(bpn.dirname)

	# Copy/move file from source path to destination path (dir and digest)
	#if bpn.dirname == rpn.dirname
	#	FileUtils.move(rpn, new_real_path)
	#else
		FileUtils.copy(rpn, new_real_path)
	#end

	{:path => new_http_path, :query => nil}
end
