(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("jQuery"));
	else if(typeof define === 'function' && define.amd)
		define("app", ["jQuery"], factory);
	else if(typeof exports === 'object')
		exports["app"] = factory(require("jQuery"));
	else
		root["Tg"] = root["Tg"] || {}, root["Tg"]["app"] = factory(root["jQuery"]);
})(window, function(__WEBPACK_EXTERNAL_MODULE_jquery__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"app": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./js/app.js","vendor"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "../.modernizrrc.js":
/*!**************************!*\
  !*** ../.modernizrrc.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;(function (window) {
  var hadGlobal = 'Modernizr' in window;var oldGlobal = window.Modernizr; /*!
                                                                          * modernizr v3.6.0
                                                                          * Build https://modernizr.com/download?-localstorage-sessionstorage-setclasses-dontmin
                                                                          *
                                                                          * Copyright (c)
                                                                          *  Faruk Ates
                                                                          *  Paul Irish
                                                                          *  Alex Sexton
                                                                          *  Ryan Seddon
                                                                          *  Patrick Kettner
                                                                          *  Stu Cox
                                                                          *  Richard Herrera
                                                                          * MIT License
                                                                          */

  /*
   * Modernizr tests which native CSS3 and HTML5 features are available in the
   * current UA and makes the results available to you in two ways: as properties on
   * a global `Modernizr` object, and as classes on the `<html>` element. This
   * information allows you to progressively enhance your pages with a granular level
   * of control over the experience.
  */

  ;(function (window, document, undefined) {
    var tests = [];

    /**
     *
     * ModernizrProto is the constructor for Modernizr
     *
     * @class
     * @access public
     */

    var ModernizrProto = {
      // The current version, dummy
      _version: '3.6.0',

      // Any settings that don't work as separate modules
      // can go in here as configuration.
      _config: {
        'classPrefix': '',
        'enableClasses': true,
        'enableJSClass': true,
        'usePrefixes': true
      },

      // Queue of tests
      _q: [],

      // Stub these for people who are listening
      on: function on(test, cb) {
        // I don't really think people should do this, but we can
        // safe guard it a bit.
        // -- NOTE:: this gets WAY overridden in src/addTest for actual async tests.
        // This is in case people listen to synchronous tests. I would leave it out,
        // but the code to *disallow* sync tests in the real version of this
        // function is actually larger than this.
        var self = this;
        setTimeout(function () {
          cb(self[test]);
        }, 0);
      },

      addTest: function addTest(name, fn, options) {
        tests.push({ name: name, fn: fn, options: options });
      },

      addAsyncTest: function addAsyncTest(fn) {
        tests.push({ name: null, fn: fn });
      }
    };

    // Fake some of Object.create so we can force non test results to be non "own" properties.
    var Modernizr = function Modernizr() {};
    Modernizr.prototype = ModernizrProto;

    // Leak modernizr globally when you `require` it rather than force it here.
    // Overwrite name so constructor name is nicer :D
    Modernizr = new Modernizr();

    var classes = [];

    /**
     * is returns a boolean if the typeof an obj is exactly type.
     *
     * @access private
     * @function is
     * @param {*} obj - A thing we want to check the type of
     * @param {string} type - A string to compare the typeof against
     * @returns {boolean}
     */

    function is(obj, type) {
      return (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === type;
    }
    ;

    /**
     * Run through all tests and detect their support in the current UA.
     *
     * @access private
     */

    function testRunner() {
      var featureNames;
      var feature;
      var aliasIdx;
      var result;
      var nameIdx;
      var featureName;
      var featureNameSplit;

      for (var featureIdx in tests) {
        if (tests.hasOwnProperty(featureIdx)) {
          featureNames = [];
          feature = tests[featureIdx];
          // run the test, throw the return value into the Modernizr,
          // then based on that boolean, define an appropriate className
          // and push it into an array of classes we'll join later.
          //
          // If there is no name, it's an 'async' test that is run,
          // but not directly added to the object. That should
          // be done with a post-run addTest call.
          if (feature.name) {
            featureNames.push(feature.name.toLowerCase());

            if (feature.options && feature.options.aliases && feature.options.aliases.length) {
              // Add all the aliases into the names list
              for (aliasIdx = 0; aliasIdx < feature.options.aliases.length; aliasIdx++) {
                featureNames.push(feature.options.aliases[aliasIdx].toLowerCase());
              }
            }
          }

          // Run the test, or use the raw value if it's not a function
          result = is(feature.fn, 'function') ? feature.fn() : feature.fn;

          // Set each of the names on the Modernizr object
          for (nameIdx = 0; nameIdx < featureNames.length; nameIdx++) {
            featureName = featureNames[nameIdx];
            // Support dot properties as sub tests. We don't do checking to make sure
            // that the implied parent tests have been added. You must call them in
            // order (either in the test, or make the parent test a dependency).
            //
            // Cap it to TWO to make the logic simple and because who needs that kind of subtesting
            // hashtag famous last words
            featureNameSplit = featureName.split('.');

            if (featureNameSplit.length === 1) {
              Modernizr[featureNameSplit[0]] = result;
            } else {
              // cast to a Boolean, if not one already
              if (Modernizr[featureNameSplit[0]] && !(Modernizr[featureNameSplit[0]] instanceof Boolean)) {
                Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);
              }

              Modernizr[featureNameSplit[0]][featureNameSplit[1]] = result;
            }

            classes.push((result ? '' : 'no-') + featureNameSplit.join('-'));
          }
        }
      }
    }
    ;

    /**
     * docElement is a convenience wrapper to grab the root element of the document
     *
     * @access private
     * @returns {HTMLElement|SVGElement} The root element of the document
     */

    var docElement = document.documentElement;

    /**
     * A convenience helper to check if the document we are running in is an SVG document
     *
     * @access private
     * @returns {boolean}
     */

    var isSVG = docElement.nodeName.toLowerCase() === 'svg';

    /**
     * setClasses takes an array of class names and adds them to the root element
     *
     * @access private
     * @function setClasses
     * @param {string[]} classes - Array of class names
     */

    // Pass in an and array of class names, e.g.:
    //  ['no-webp', 'borderradius', ...]
    function setClasses(classes) {
      var className = docElement.className;
      var classPrefix = Modernizr._config.classPrefix || '';

      if (isSVG) {
        className = className.baseVal;
      }

      // Change `no-js` to `js` (independently of the `enableClasses` option)
      // Handle classPrefix on this too
      if (Modernizr._config.enableJSClass) {
        var reJS = new RegExp('(^|\\s)' + classPrefix + 'no-js(\\s|$)');
        className = className.replace(reJS, '$1' + classPrefix + 'js$2');
      }

      if (Modernizr._config.enableClasses) {
        // Add the new classes
        className += ' ' + classPrefix + classes.join(' ' + classPrefix);
        if (isSVG) {
          docElement.className.baseVal = className;
        } else {
          docElement.className = className;
        }
      }
    }

    ;
    /*!
    {
      "name": "Local Storage",
      "property": "localstorage",
      "caniuse": "namevalue-storage",
      "tags": ["storage"],
      "knownBugs": [],
      "notes": [],
      "warnings": [],
      "polyfills": [
        "joshuabell-polyfill",
        "cupcake",
        "storagepolyfill",
        "amplifyjs",
        "yui-cacheoffline"
      ]
    }
    !*/

    // In FF4, if disabled, window.localStorage should === null.

    // Normally, we could not test that directly and need to do a
    //   `('localStorage' in window)` test first because otherwise Firefox will
    //   throw bugzil.la/365772 if cookies are disabled

    // Similarly, in Chrome with "Block third-party cookies and site data" enabled,
    // attempting to access `window.sessionStorage` will throw an exception. crbug.com/357625

    // Also in iOS5 Private Browsing mode, attempting to use localStorage.setItem
    // will throw the exception:
    //   QUOTA_EXCEEDED_ERROR DOM Exception 22.
    // Peculiarly, getItem and removeItem calls do not throw.

    // Because we are forced to try/catch this, we'll go aggressive.

    // Just FWIW: IE8 Compat mode supports these features completely:
    //   www.quirksmode.org/dom/html5.html
    // But IE8 doesn't support either with local files

    Modernizr.addTest('localstorage', function () {
      var mod = 'modernizr';
      try {
        localStorage.setItem(mod, mod);
        localStorage.removeItem(mod);
        return true;
      } catch (e) {
        return false;
      }
    });

    /*!
    {
      "name": "Session Storage",
      "property": "sessionstorage",
      "tags": ["storage"],
      "polyfills": ["joshuabell-polyfill", "cupcake", "sessionstorage"]
    }
    !*/

    // Because we are forced to try/catch this, we'll go aggressive.

    // Just FWIW: IE8 Compat mode supports these features completely:
    //   www.quirksmode.org/dom/html5.html
    // But IE8 doesn't support either with local files
    Modernizr.addTest('sessionstorage', function () {
      var mod = 'modernizr';
      try {
        sessionStorage.setItem(mod, mod);
        sessionStorage.removeItem(mod);
        return true;
      } catch (e) {
        return false;
      }
    });

    // Run each test
    testRunner();

    // Remove the "no-js" class if it exists
    setClasses(classes);

    delete ModernizrProto.addTest;
    delete ModernizrProto.addAsyncTest;

    // Run the things that are supposed to run after the tests
    for (var i = 0; i < Modernizr._q.length; i++) {
      Modernizr._q[i]();
    }

    // Leak Modernizr namespace
    window.Modernizr = Modernizr;

    ;
  })(window, document);module.exports = window.Modernizr;if (hadGlobal) {
    window.Modernizr = oldGlobal;
  } else {
    delete window.Modernizr;
  }
})(window);

/***/ }),

/***/ "./assets_list.json":
/*!**************************!*\
  !*** ./assets_list.json ***!
  \**************************/
/*! exports provided: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, default */
/***/ (function(module) {

module.exports = ["background/background-rock-dark.jpg","background/dark-wood.jpg","background/wood_rightside.jpg","borders/border-001-horizontal.png","borders/border-002-tiny-v.png","borders/border-002-tiny.png","borders/border-controlpanel-bottom.png","borders/border-controlpanel-bottomleft.png","borders/border-controlpanel-bottomright.png","borders/border-controlpanel-left.png","borders/border-controlpanel-right.png","borders/border-controlpanel-top.png","borders/border-controlpanel-topleft.png","borders/border-controlpanel-topright.png","borders/border-modal-bottom.png","borders/border-modal-bottomleft.png","borders/border-modal-bottomright.png","borders/border-modal-left.png","borders/border-modal-paper-bottomleftt.png","borders/border-modal-paper-topleft.png","borders/border-modal-paper-topright.png","borders/border-modal-right.png","borders/border-modal-top.png","borders/border-modal-topleft.png","borders/border-modal-topright.png","borders/border-paneleft-left.png","borders/border-thin-dark-horizontal.png","borders/border-thin-dark-verticall.png","borders/border_ministone_bottom.png","borders/border_ministone_bottomleft.png","borders/border_ministone_bottomright.png","borders/border_ministone_left.png","borders/border_ministone_right.png","borders/border_ministone_top.png","borders/border_ministone_topleft.png","borders/border_ministone_topright.png","borders/border_stonelight_bottom.png","borders/border_stonelight_bottomleft.png","borders/border_stonelight_bottomright.png","borders/border_stonelight_left.png","borders/border_stonelight_right.png","borders/border_stonelight_top.png","borders/border_stonelight_topleft.png","borders/border_stonelight_topright.png","borders/border-modal-paper-bottom.jpg","borders/border-modal-paper-bottomleft.jpg","borders/border-modal-paper-bottomright.jpg","borders/border-modal-paper-left.jpg","borders/border-modal-paper-right.jpg","borders/border-modal-paper-top.jpg","borders/border-modal-paper-topleft.jpg","borders/border-modal-paper-topright.jpg","borders/border-wc-area-b.jpg","borders/border-wc-area-l.jpg","borders/border-wc-area-r.jpg","borders/border-wc-area-t.jpg","borders/corner-wc-area-bl.jpg","borders/corner-wc-area-br.jpg","borders/corner-wc-area-tl.jpg","borders/corner-wc-area-tr.jpg","borders/stone-corner-bottomleft.jpg","borders/stone-corner-bottomright.jpg","borders/stone-corner-topleft.jpg","borders/stone-corner-topright.jpg","borders/stone-horizontal-bottom.jpg","borders/stone-horizontal-top.jpg","borders/stone-vertical-left.jpg","borders/stone-vertical-right.jpg","bars/fame.jpg","bars/healt.jpg","bars/sete.jpg","bars/stamina.jpg","buttons/buttons_sprite.png","fasi/shadow1_b99bf075569b7cccddaf6da738b91013.png","fasi/shadowtile.png","fasi/fasi.jpg","interface/modal_title_left_bg.png","interface/modal_title_right_bg.png","interface/navbar_background.png","interface/pass_sprite.png","interface/quadrante.png","interface/shadow1.png","interface/shadow2.png","interface/shadow3.png","interface/shadow_quadrante.png","interface/shadowtile.png","interface/fasi.jpg","icons/base-square.png","icons/icons_sprite.png","logo/triang_est.png","logo/triang_est_light.png","logo/triang_int.png","logo/welcomelogo.png","logo/welcomelogo.jpg","mapobj/mapobj_sprite.png","tiles/tiles.png","tiles/tiles_m.png","tiles/tiles_s.png","various/various_sprite.png"];

/***/ }),

/***/ "./js/app.js":
/*!*******************!*\
  !*** ./js/app.js ***!
  \*******************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*  TG 2.0 @2018
    Main Client Entry Point */

var _client = __webpack_require__(/*! modules/client.js */ "./js/modules/client.js");

var _client2 = _interopRequireDefault(_client);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(function (document, window) {
    $.ajaxSetup({ cache: true });

    // enable any bootstrap tooltip
    function onReady() {
        var client = new _client2.default();
        client.init();
    };

    // TODO: Google Analytics

    $(document).ready(onReady);
})(document, window);

/***/ }),

/***/ "./js/modules/client.js":
/*!******************************!*\
  !*** ./js/modules/client.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // ========== NPM Modules


//============ Assets file list.

//============ Custom
//import FacebookSDK from 'facebookSdk';


var _socket = __webpack_require__(/*! socket.io-client */ "../node_modules/socket.io-client/lib/index.js");

var _socket2 = _interopRequireDefault(_socket);

var _modernizr = __webpack_require__(/*! modernizr */ "../.modernizrrc.js");

var _modernizr2 = _interopRequireDefault(_modernizr);

var _jsCookie = __webpack_require__(/*! js-cookie */ "../node_modules/js-cookie/src/js.cookie.js");

var _jsCookie2 = _interopRequireDefault(_jsCookie);

var _perfectScrollbar = __webpack_require__(/*! perfect-scrollbar */ "../node_modules/perfect-scrollbar/dist/perfect-scrollbar.esm.js");

var _perfectScrollbar2 = _interopRequireDefault(_perfectScrollbar);

__webpack_require__(/*! bootstrap */ "../node_modules/bootstrap/dist/js/bootstrap.js");

__webpack_require__(/*! magnific-popup */ "../node_modules/magnific-popup/dist/jquery.magnific-popup.js");

__webpack_require__(/*! draggabilly/dist/draggabilly.pkgd.js */ "../node_modules/draggabilly/dist/draggabilly.pkgd.js");

__webpack_require__(/*! easy-autocomplete */ "../node_modules/easy-autocomplete/dist/jquery.easy-autocomplete.js");

var _assets_list = __webpack_require__(/*! assets_list.json */ "./assets_list.json");

var _assets_list2 = _interopRequireDefault(_assets_list);

var _preloader = __webpack_require__(/*! preloader */ "./js/modules/preloader.js");

var _preloader2 = _interopRequireDefault(_preloader);

var _mapDrawer = __webpack_require__(/*! mapDrawer */ "./js/modules/mapDrawer.js");

var _mapDrawer2 = _interopRequireDefault(_mapDrawer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TgGui = function () {
    function TgGui(options) {
        _classCallCheck(this, TgGui);

        this.ws_server_addr = '51.38.185.84:3335';
        this.socket_io_resource = 'socket.io';
        this.media_server_addr = 'http://play.thegatemud.it/images/';
        this.ws_prefix = '/';
        this.images_path = './images/';
        this.sounds_path = '';

        this.socketListener = {};

        /* Cookies Settings */
        this.cookies = {
            prefix: 'tgwc',
            expires: 365 * 10
        };

        /* Connection */
        //this.serverIsReady = false;
        this.isConnected = false;
        this.socket = null;
        this.netdata = '';

        /* Login */

        this.inGame = false;
        this.isGod = false;
        this.godInvLev = 0;

        this.connectionInfo = {
            loginName: null,
            loginPass: null,
            error: null
        };

        this.client_state = {};

        /* UI Game Options */
        this.client_options = {
            alpha_approved: false,
            shortcuts: [],
            login: {},
            interface: {
                dashboard: 0
            },
            details: {
                compact: false
            }
        };

        /* Status */
        this.in_editor = false;
        this.cursor_on_map = false;

        /* History */
        this.max_history_length = 40;
        this.cmd_history_pos = 0;
        this.cmd_history = [];

        /* Exits */
        this.dir_north = 0;
        this.dir_east = 1;
        this.dir_south = 2;
        this.dir_west = 3;
        this.dir_up = 4;
        this.dir_down = 5;

        this.dir_names = ['nord', 'est', 'sud', 'ovest', 'alto', 'basso'];
        this.dir_status = '000000';

        /* Shortcuts */
        this.shortcuts_map = {};

        /* Input */
        this.cmd_prefix = '';

        /* Output */
        this.last_room_desc = '';

        /* Details */
        this.exp_grp_list = {};

        /* Health bars */
        this.hlttxtcol = [{
            let: 25,
            txt: 'orangered'
        }, {
            let: 50,
            txt: 'yellow'
        }, {
            let: 100,
            txt: 'greenyellow'
        }];

        this.client_update = {
            interfaceData: {
                info: false,
                stato: false
            },
            last: 0,
            inventory: {
                version: -1,
                needed: false
            },
            equipment: {
                version: -1,
                needed: false
            },
            room: {
                version: -1,
                needed: false
            }
        };

        this.scrollbar = {
            output: null
        };

        /* Debug */
        this.debug = true;
    }

    _createClass(TgGui, [{
        key: 'init',
        value: function init() {
            var _ = this;
            // Get Cookie "Italy cookie law"
            var cookie_consent = _.LoadStorage('cookie_consent');
            // Check Cookie Law Approval Status, then go to start or wait user action.
            if (!cookie_consent) {
                _.showCookieLawDisclaimer();
            } else {
                _.removeCookieLawDisclaimer();
                _.startClient();
            }
        }
    }, {
        key: 'startClient',
        value: function startClient() {
            var _ = this;

            /* let facebookSDK = new FacebookSDK();
             facebookSDK.load();
             */
            // Init the Session
            _.initSessionData();
            // Start Server Connection
            _.connectToServer().then(function (resolve, reject) {
                if (_.isConnected) {
                    _.initLoginPanel();
                }
                if (_.debug) {
                    console.log('Server Status:', _.isConnected);
                }
            });
        }
    }, {
        key: 'connectToServer',
        value: function connectToServer() {
            var _ = this;

            return new Promise(function (resolve, reject) {
                if (_.socket) {
                    _.socket.destroy();
                    delete _.socket;
                    _.socket = null;
                }

                // Initialize Connection to the WebSocket
                _.socket = _socket2.default.connect(_.ws_server_addr, {
                    'reconnection': true,
                    'force new connection': true,
                    'resource': _.socket_io_resource,
                    'transports': ['polling']
                });

                // Server status
                _.socket.on('connect', function () {

                    console.log('connect');
                    _.isConnected = true;
                    _.networkActivityMessage("Server Online", 1);
                    resolve(true);
                });

                _.socket.on('disconnect', function () {
                    console.log('disconnect');
                    _.setDisconnect();
                    _.connectToServer();
                    if (!_.connectionInfo.error) {
                        _.networkActivityMessage("Disconnesso dal server");
                    }
                });

                _.socket.on('reconnect_attempt', function () {
                    console.log('is a reconnect');
                });

                _.socket.on('connect_error', function (e) {
                    if (_.isConnected) {
                        _.networkActivityMessage("Connessione chiusa");
                    } else {
                        _.networkActivityMessage("Il server di gioco è offline.", 0);
                    }
                    resolve(false);
                });
            });
        }
    }, {
        key: 'handleLoginData',
        value: function handleLoginData(data) {
            var _ = this;
            if (data.indexOf("&!connmsg{") == 0) {
                var end = data.indexOf('}!');
                var rep = $.parseJSON(data.slice(9, end + 1));

                if (rep.msg) {
                    switch (rep.msg) {
                        case 'ready':
                            _.sendOOB({
                                itime: _.client_state.when.toString(16)
                            });
                            break;

                        case 'enterlogin':
                            _.performLogin();
                            break;

                        case 'shutdown':
                            console.log('shutdown');
                            _.networkActivityMessage('Attenzione, il server sarà spento entro breve per manutenzione.');
                            _.performLogin();
                            break;

                        case 'reboot':
                            console.log('reboot');
                            _.networkActivityMessage('Attenzione, il server sarà riavviato entro breve.');
                            _.performLogin();
                            break;

                        case 'created':
                        case 'loginok':

                            // Preload client then start the magic
                            var clientPreloader = new _preloader2.default(_assets_list2.default, _.images_path);

                            clientPreloader.init().then(function () {
                                //reset login message
                                _.loginNetworkActivityMessage("");
                                _.hideLoginPanel();
                                _.loadInterface();
                                _.completeHandshake();
                                _.handleServerData(data.slice(end + 2));
                            }, function () {
                                console.log("Assets error"); // Error!
                            });

                            // User loged in with Facebook SDK.

                            /*if(!directLogin)
                            {
                                if (updateChars)
                                {
                                    doUpdateCharacters();
                                }
                                
                                moveLoginPanel('login');
                            }*/
                            break;

                        default:
                            var connectionError = _.getLoginReplyMessage(rep.msg);
                            if (!connectionError) connectionError = _.getLoginReplyMessage('errorproto');
                            _.loginError(connectionError);
                            break;

                    }
                }
            }
        }
    }, {
        key: 'completeHandshake',
        value: function completeHandshake() {
            var _ = this;
            _.socket.off('data');
            _.socket.on('data', _.handleServerData.bind(_));
            _.setHandshaked();
        }
    }, {
        key: 'handleServerData',
        value: function handleServerData(msg) {

            var _ = this;
            _.netdata += msg;
            var len = _.netdata.length;

            if (_.netdata.indexOf("&!!", len - 3) !== -1) {

                var data = _.preparseText(_.netdata.substr(0, len - 3));

                try {
                    _.showOutput(_.parseForDisplay(data));
                } catch (err) {
                    console.log(err);
                }

                _.netdata = '';
            } else if (len > 200000) {
                _.showOutput('<br>Errore di comunicazione con il server!<br>');
                _.netdata = '';
                _.setDisconnect();
            }
        }
    }, {
        key: 'setHandshaked',
        value: function setHandshaked() {
            this.clearUpdate();
        }
    }, {
        key: 'clearUpdate',
        value: function clearUpdate() {
            this.client_update.inventory.version = -1;
            this.client_update.inventory.needed = false;
            this.client_update.equipment.version = -1;
            this.client_update.equipment.needed = false;
            this.client_update.room.version = -1;
            this.client_update.room.needed = false;
        }
    }, {
        key: 'setDisconnect',
        value: function setDisconnect() {
            var _ = this;
            _.isConnected = false;
            _.inGame = false;
            $('.tg-loginform').show();
        }

        /* COOKIE LAW */

    }, {
        key: 'showCookieLawDisclaimer',
        value: function showCookieLawDisclaimer() {
            var _ = this;

            $(document).on('click', '#cookieconsentbutton', function () {
                _.SaveStorage('cookie_consent', true);
                $.magnificPopup.close();
                _.startClient();
            });

            _.openPopup('cookielaw', "Cookie Policy", '');
        }
    }, {
        key: 'removeCookieLawDisclaimer',
        value: function removeCookieLawDisclaimer() {
            $('.tg-cookielawcontent').remove();
        }
    }, {
        key: 'initSessionData',
        value: function initSessionData() {

            var _ = this;
            // Load State
            var saved_state = _jsCookie2.default.getJSON(_.cookies.prefix + 'state');

            if (_modernizr2.default.localstorage && saved_state) {
                _.SaveStorage('state', saved_state);
                _jsCookie2.default.set(_.cookies.prefix + 'state', null);
            } else {
                saved_state = _.LoadStorage('state');
            }
            if (saved_state) {
                $.extend(_.client_state, saved_state);
            }
            if (_.client_state.when == null) {
                _.client_state.when = new Date().getTime();
                _.SaveStorage('state', _.client_state);
            }

            // Load Options
            var saved_options = _jsCookie2.default.getJSON(_.cookies.prefix + 'options');

            if (_modernizr2.default.localstorage && saved_options) {
                _.SaveStorage('options', saved_options);
                (0, _jsCookie2.default)(cookies.prefix + 'options', null);
            } else {
                saved_options = _.LoadStorage('options');
            }

            if (saved_options) {
                $.extend(_.client_options, saved_options);
            }
        }
    }, {
        key: 'LoadStorage',
        value: function LoadStorage(what) {

            what = this.cookies.prefix + what;

            if (_modernizr2.default.localstorage) {
                var data = localStorage[what];
                return data ? JSON.parse(data) : null;
            } else {
                return _jsCookie2.default.get(what);
            }
        }
    }, {
        key: 'SaveStorage',
        value: function SaveStorage(what, value) {
            var _ = this;
            what = _.cookies.prefix + what;
            if (_modernizr2.default.localstorage) {
                localStorage[what] = JSON.stringify(value);
            } else {
                _jsCookie2.default.set(what, value, {
                    'expires': _.cookies.expires,
                    'path': _.cookies.path
                });
            }
        }
    }, {
        key: 'UploadUserConfiguration',
        value: function UploadUserConfiguration() {
            // TODO:
        }
    }, {
        key: 'ExtractAndSaveUserConfiguration',
        value: function ExtractAndSaveUserConfiguration() {}
        // TODO:


        /* *****************************************************************************
         * Login 
         */

    }, {
        key: 'hideLoginPanel',
        value: function hideLoginPanel() {
            $('.tg-loginpanel').hide();
        }
    }, {
        key: 'initLoginPanel',
        value: function initLoginPanel() {
            var _ = this;

            //toggle logo visibility
            $('.tg-logo-composit').css('visibility', 'visible');

            $('#login_username').focus();
            $('#loginPanel').on('submit', function (e) {
                e.preventDefault();
                var name = $('#login_username').val();
                var pass = $('#login_password').val();
                if (!name || !pass) {
                    //TODO: Notify user to provide credentials
                    return;
                }
                _.loginNetworkActivityMessage("Connessione in corso...");

                _.connectionInfo.loginName = name;
                _.connectionInfo.loginPass = pass;
                _.connectionInfo.mode = "login";
                //Attach oob Socket Handler
                _.socket.on('data', _.handleLoginData.bind(_));
                _.socket.emit('loginrequest');
            });

            // On New  Character Creation button
            $('#doNewCharacter').on('click', function () {
                _.openPopup('nofeature');
            });
        }
    }, {
        key: 'performLogin',
        value: function performLogin() {
            var _ = this;
            if (_.connectionInfo.mode == 'login') {
                _.sendToServer("login:" + _.connectionInfo.loginName + "," + _.connectionInfo.loginPass + "\n");
            }
        }
    }, {
        key: 'loginErrorClean',
        value: function loginErrorClean() {
            _.connectionInfo.error = null;
        }
    }, {
        key: 'loginError',
        value: function loginError(msg) {
            this.connectionInfo.error = msg;
            this.loginNetworkActivityMessage(msg);
        }
    }, {
        key: 'loginNetworkActivityMessage',
        value: function loginNetworkActivityMessage(msg) {
            $('.tg-loginstatus').text(msg);
        }
    }, {
        key: 'networkActivityMessage',
        value: function networkActivityMessage(msg, status) {
            $('.tg-serverstatus').text(msg);
            $('body').attr('data-serverstatus', status);
        }
    }, {
        key: 'disconnectFromServer',
        value: function disconnectFromServer() {
            var _ = this;
            if (_.isConnected) {
                if (_.inGame) _.sendToServer(_.historyPush('fine'));else _.socket.disconnect();
            }
        }

        /* *****************************************************************************
        * MESSAGES PARSE
        */

    }, {
        key: 'preparseText',
        value: function preparseText(msg) {

            // Remove -not-tags-
            msg = msg.replace(/\r/gm, '');
            msg = msg.replace(/&!!/gm, '');
            msg = msg.replace(/\$\$/gm, '$');
            msg = msg.replace(/%%/gm, '%');
            msg = msg.replace(/&&/gm, '&#38;');
            msg = msg.replace(/</gm, '&#60;');
            msg = msg.replace(/>/gm, '&#62;');

            return msg;
        }
    }, {
        key: 'parseForDisplay',
        value: function parseForDisplay(msg) {
            var _ = this,
                pos = void 0;

            console.log(msg);

            //Hide text (password)
            msg = msg.replace(/&x\n*/gm, function () {
                console.log('input type password enabled');
                // _.inputPassword();
                return '';
            });

            //Show text (normal input)
            msg = msg.replace(/&e\n*/gm, function () {
                console.log('input type text enabled');
                //inputText();
                return '';
            });

            // Sky picture
            msg = msg.replace(/&o.\n*/gm, function (sky) {
                var sky_parse = sky.charAt(2);
                _.setSky(sky_parse);
                return '';
            });

            // Exits info
            msg = msg.replace(/&d\d{6}\n*/gm, function (doors) {
                var doors_parse = doors.substr(2, 6);
                _.setDoors(doors_parse);
                return '';
            });

            // Audio
            msg = msg.replace(/&!au"[^"]*"\n*/gm, function (audio) {
                var audio_parse = audio.slice(5, audio.lastIndexOf('"'));
                _.playAudio(audio_parse);
                return '';
            });

            // Player status
            msg = msg.replace(/&!st"[^"]*"\n*/gm, function (status) {
                var status_parse = status.slice(5, status.lastIndexOf('"')).split(',');
                return _.setStatus(status_parse);
            });

            // Player status
            msg = msg.replace(/&!up"[^"]*"\n*/gm, function (update) {
                var update_parse = update.slice(5, status.lastIndexOf('"')).split(',');

                if (update_parse[0] > _.client_update.inventory.version) _.client_update.inventory.needed = true;

                if (update_parse[1] > _.client_update.equipment.version) _.client_update.equipment.needed = true;

                if (update_parse[2] > _.client_update.room.version) _.client_update.room.needed = true;

                return '';
            });

            // Image in side frame (with gamma)
            msg = msg.replace(/&!img"[^"]*"\n*/gm, function (image) {
                console.log('show image with gamma');
                //     // var image = image.slice(6, image.lastIndexOf('"')).split(',');
                //     // showImageWithGamma(image[0], image[1], image[2], image[3]);
                return '';
            });

            // Image in side frame
            msg = msg.replace(/&!im"[^"]*"\n*/gm, function (image) {
                var image_parse = image.slice(5, image.lastIndexOf('"'));
                _.showImage(image_parse);
                return '';
            });

            // Player is logged in
            msg = msg.replace(/&!logged"[^"]*"/gm, function () {
                _.inGame = true;
                _.processCommands('info; stat', false);
                return '';
            });

            // Close the text editor
            msg = msg.replace(/&!ea"[^"]*"\n*/gm, function (options) {
                _.closeEditor();
                return '';
            });

            // Open the text editor
            msg = msg.replace(/&!ed"[^"]*"\n*/gm, function (options) {
                var options_parse = options.slice(5, options.lastIndexOf('"')).split(',');
                var text = options_parse.slice(2).toString().replace(/\n/gm, ' ');
                _.openEditor(options_parse[0], options_parse[1], text);
                return '';
            });

            // Map data
            msg = msg.replace(/&!map\{[\s\S]*?\}!/gm, function (map) {
                var map_parse = $.parseJSON(map.slice(5, -1));
                _.MAP_OBJECT.updateMap(map_parse);
                return '';
            });

            // Book
            msg = msg.replace(/&!book\{[\s\S]*?\}!/gm, function (b) {
                var b_parse = $.parseJSON(b.slice(6, -1));
                console.log('open book');
                // openBook(b);
                return '';
            });

            // List of commands
            msg = msg.replace(/&!cmdlst\{[\s\S]*?\}!/gm, function (cmd) {
                var cmd_parse = $.parseJSON(cmd.slice(8, -1).replace(/"""/, '"\\""'));
                console.log('return commands list');
                //return _.renderCommandsList(cmd_parse);
            });

            // Generic page (title, text)
            msg = msg.replace(/&!page\{[\s\S]*?\}!/gm, function (p) {
                var page_parse = $.parseJSON(p.slice(6, -1)); /* .replace(/\n/gm,' ') */
                // return addFrameStyle(addBannerStyle(p.title) + '<div class="text">' + p.text.replace(/\n/gm, '<br>') + '</div>');
                var page_html = '<div class="tg-title lt-red">' + page_parse.title + '</div><div class="text">' + page_parse.text.replace(/\n/gm, '<br>') + '</div>';
                if (page_parse.title == 'Notizie') {
                    _.openPopup('notizie');
                } else {
                    //TODO: Page parse generic 
                    console.log('!page todo');
                }
                return '';
            });

            // Generic table (title, head, data)
            msg = msg.replace(/&!table\{[\s\S]*?\}!/gm, function (t) {
                var gtable_parse = $.parseJSON(t.slice(7, -1));
                console.log('Generic table');
                //return _.renderTable(gtable_parse);
            });

            // Inventory
            msg = msg.replace(/&!inv\{[\s\S]*?\}!/gm, function (inv) {
                var inv_parse = $.parseJSON(inv.slice(5, -1));
                console.log('inventory');
                // renderInventory(inv_parse);
                return '';
            });

            // Room details
            msg = msg.replace(/&!room\{[\s\S]*?\}!/gm, function (dtls) {
                var dtls_parse = $.parseJSON(dtls.slice(6, -1));
                return _.renderDetails(dtls_parse, dtls_parse.dir ? 'dir' : 'room');
            });

            // Person details
            msg = msg.replace(/&!pers\{[\s\S]*?\}!/gm, function (dtls) {
                var dtls_parse = $.parseJSON(dtls.slice(6, -1));
                return _.renderDetails(dtls_parse, 'pers');
            });

            // Object details
            msg = msg.replace(/&!obj\{[\s\S]*?\}!/gm, function (dtls) {
                var dtls_parse = $.parseJSON(dtls.slice(5, -1).replace(/\n/gm, ' '));
                return _.renderDetailsInText(dtls_parse, 'obj');
            });

            // Equipment
            msg = msg.replace(/&!equip\{[\s\S]*?\}!/gm, function (eq) {
                var eq_parse = $.parseJSON(eq.slice(7, -1).replace(/\n/gm, '<br>'));
                console.log('renderEquipment');
                //_.renderEquipment(eq_parse);
                _.openPopup('nofeature');
                return '';
            });

            // Workable lists
            msg = msg.replace(/&!wklst\{[\s\S]*?\}!/gm, function (wk) {
                var wk_parse = $.parseJSON(wk.slice(7, -1));
                console.log('renderworkslist');
                _.openPopup('nofeature');
                //return renderWorksList(wk);
            });

            // Skill list
            msg = msg.replace(/&!sklst\{[\s\S]*?\}!/gm, function (skinfo) {
                var skinfo_parse = $.parseJSON(skinfo.slice(7, -1));
                console.log('renderSkillsList');
                //return renderSkillsList(skinfo_parse);
            });

            // Player info
            msg = msg.replace(/&!pginf\{[\s\S]*?\}!/gm, function (info) {
                var info_parse = $.parseJSON(info.slice(7, -1));
                if (!_.client_update.interfaceData.info) {
                    _.setDataInterface('info', info_parse);
                    _.client_update.interfaceData.info = true;
                    return '';
                } else {
                    //TODO: Carefully, after change desc this msg will be call
                    return '';
                    //return renderPlayerInfo(info);
                }
            });

            // Player status
            msg = msg.replace(/&!pgst\{[\s\S]*?\}!/gm, function (status) {
                var status_parse = $.parseJSON(status.slice(6, -1));
                if (!_.client_update.interfaceData.stato) {
                    _.setDataInterface('stato', status_parse);
                    _.client_update.interfaceData.stato = true;
                    return '';
                } else {
                    _.setDataInterface('stato', status_parse);
                    //return _.renderPlayerStatus(status_parse);
                }
                return '';
            });

            // Selectable generic
            msg = msg.replace(/&!select\{[\s\S]*?\}!/gm, function (s) {
                s = $.parseJSON(s.slice(8, -1));
                console.log('selectDialog');
                //return selectDialog(s);
            });

            // Refresh command
            msg = msg.replace(/&!refresh\{[\s\S]*?\}!/gm, function (t) {
                var rcommand_parse = $.parseJSON(t.slice(9, -1));
                return _.handleRefresh(rcommand_parse);
            });

            // Pause scroll
            msg = msg.replace(/&!crlf"[^"]*"/gm, function () {
                _.pauseOn();
                return '';
            });

            // Clear message
            pos = msg.lastIndexOf('&*');
            if (pos >= 0) {
                _.clearOutput();
                msg = msg.slice(pos + 2);
            }

            // Filterable messages
            msg = msg.replace(/&!m"(.*)"\{([\s\S]*?)\}!/gm, function (line, type, msg) {
                console.log('addFilterTag');
                //  return addFilterTag(type, msg);
            });

            msg = msg.replace(/&!ce"[^"]*"/gm, function (image) {
                var image_parse = image.slice(5, -1);
                console.log('renderEmbeddedImage');
                //return renderEmbeddedImage(image_parse);
            });

            msg = msg.replace(/&!ulink"[^"]*"/gm, function (link) {
                var link_parse = link.slice(8, -1).split(',');
                console.log('renderLink');
                //            return renderLink(link_parse[0], link_parse[1]);
            });

            msg = msg.replace(/&!as"[^"]*"/gm, '');

            msg = msg.replace(/&!(ad|a)?m"[^"]*"/gm, function (mob) {
                var mob_parse = mob.slice(mob.indexOf('"') + 1, -1).split(',');
                var desc_parse = mob.slice(5).toString();
                return _.renderMob(mob_parse[0], mob_parse[1], mob_parse[2], mob_parse[3], desc_parse, 'interact pers');
            });

            msg = msg.replace(/&!(ad|a)?o"[^"]*"/gm, function (obj) {
                var obj_parse = obj.slice(obj.indexOf('"') + 1, -1).split(',');
                var desc_parse = obj.slice(5).toString();
                return _.renderObject(obj_parse[0], obj_parse[1], obj_parse[2], obj_parse[3], desc_parse, 'interact obj');
            });

            msg = msg.replace(/&!sm"[^"]*"/gm, function (icon) {
                var icon_parse = icon.slice(5, -1).split(',');
                return _.renderIcon(icon_parse[0], icon_parse[1], 'room', null, null, 'interact pers');
            });

            msg = msg.replace(/&!si"[^"]*"/gm, function (icon) {
                var icon_parse = icon.slice(5, -1).split(',');
                return _.renderIcon(icon_parse[0], null, null, null, null, "v" + icon_parse[1]);
            });

            msg = msg.replace(/&i/gm, function () {
                _.isGod = true;
                return '';
            });

            msg = msg.replace(/&I\d/gm, function (inv) {
                _.godInvLev = parseInt(inv.substr(2, 3));
                return '';
            });

            /* \r is already removed at top */
            msg = msg.replace(/\n/gm, '<br>');

            if (msg != '') {
                msg = _.replaceColors('<div class="tgline">' + msg + '</div>');
            }

            return msg.replace(/<p><\/p>/g, '');
        }
    }, {
        key: 'handleRefresh',
        value: function handleRefresh(r) {
            var _ = this;
            if (this.isModalOpen) {
                _.sendToServer(r.cmd);
            }
            return '';
        }
    }, {
        key: 'replaceColors',
        value: function replaceColors(msg) {
            msg = msg.replace(/&B/gm, '<div class="tg-gray">');
            msg = msg.replace(/&R/gm, '<div class="tg-lt-red">');
            msg = msg.replace(/&G/gm, '<div class="tg-lt-green">');
            msg = msg.replace(/&Y/gm, '<div class="tg-yellow">');
            msg = msg.replace(/&L/gm, '<div class="tg-lt-blue">');
            msg = msg.replace(/&M/gm, '<div class="tg-lt-magenta">');
            msg = msg.replace(/&C/gm, '<div class="tg-lt-cyan">');
            msg = msg.replace(/&W/gm, '<div class="tg-white">');
            msg = msg.replace(/&b/gm, '<div class="tg-black">');
            msg = msg.replace(/&r/gm, '<div class="tg-red">');
            msg = msg.replace(/&g/gm, '<div class="tg-green">');
            msg = msg.replace(/&y/gm, '<div class="tg-brown">');
            msg = msg.replace(/&l/gm, '<div class="tg-blue">');
            msg = msg.replace(/&m/gm, '<div class="tg-magenta">');
            msg = msg.replace(/&c/gm, '<div class="tg-cyan">');
            msg = msg.replace(/&w/gm, '<div class="tg-lt-white">');
            msg = msg.replace(/&-/gm, '</div>');

            return msg;
        }

        /* *****************************************************************************
         * MISC RENDERING
         */

    }, {
        key: 'renderMob',
        value: function renderMob(icon, condprc, count, mrn, desc, addclass) {
            return '<div class="mob">' + this.renderIcon(icon, mrn, 'room', null, null, addclass) + '<span class="desc">' + _.decoratedDescription(condprc, null, null, count, desc) + '</span></div>';
        }
    }, {
        key: 'decoratedDescription',
        value: function decoratedDescription(condprc, moveprc, wgt, count, desc) {
            var _ = this;
            var countStr = '';

            if (count > 1) countStr = '&#160;<span class="cnt">[x' + count + ']</span>';

            return _.renderMinidetails(condprc, moveprc, wgt) + desc.replace(/\n/gm, ' ') + countStr;
        }
    }, {
        key: 'renderMinidetails',
        value: function renderMinidetails(condprc, moveprc, wgt) {
            var pos = -11 * Math.floor(22 * (100 - condprc) / 100);
            return '<div class="hstat" style="background-position:0 ' + pos + 'px" condprc="' + condprc + '"' + (moveprc ? ' moveprc="' + moveprc + '"' : "") + (wgt != null ? ' wgt="' + wgt + '"' : "") + '></div>';
        }
    }, {
        key: 'renderObject',
        value: function renderObject(icon, condprc, count, mrn, desc, addclass) {
            return '<div class="obj">' + _.renderIcon(icon, mrn, 'room', null, null, addclass) + '<span class="desc">' + _.decoratedDescription(condprc, null, null, count, desc) + '</span></div>';
        }
    }, {
        key: 'setDataInterface',
        value: function setDataInterface(cmd, data) {
            var _ = this;

            if (cmd == 'info') {
                // Name
                $('#charName').html(data.name);
                // Character Image
                if (data.image) {
                    $('.tg-characteravatar img').attr('src', _.media_server_addr + data.image);
                }
                /* Info Tooltips */
                $('.tg-characteravatar').attr('title', data.name + ' ' + data.title);
            } else if (cmd == 'stato') {
                if (data.conv) {
                    $('.tg-infocharname .icon-conva').removeClass('d-none');
                } else {
                    $('.tg-infocharname .icon-conva').addClass('d-none');
                }

                /* Healt, Move, Food and Drink bars */
                $('#foodBarText .barC').width(data.food + '%');
                $('#foodBarText i').text(data.food);
                $('#drinkBarText .barC').width(data.drink + '%');
                $('#drinkBarText i').text(data.drink);

                /* Set Character Status */
                if (data.conv == true) {
                    $('.pg-status').text('( sei convalescente! )');
                }
            }
        }

        /* *****************************************************************************
         *  Editor 
         */

    }, {
        key: 'openEditor',
        value: function openEditor(maxchars, title, text) {
            var _ = this;

            var textarea = $('#editorTextArea').val(text);
            $('#editorTitle').text(title);

            _.openPopup('editor');

            $('#abortEditor, #mfp-close').one('click', function () {
                _.abortEdit();
                _.closeEditor();
            });
            $('#saveEditor').one('click', function () {
                _.saveEdit(80);
                _.closeEditor();
            });

            // Max Chars counter
            var text_max = maxchars;
            $('#editorMaxCharsCount').html(text_max + ' caratteri rimasti');
            textarea.attr('maxlength', maxchars);
            textarea.keyup(function () {
                var text_length = $(this).val().length;
                var text_remaining = text_max - text_length;

                $('#editorMaxCharsCount').html(text_remaining + ' caratteri rimasti');
            });

            _.in_editor = true;
        }
    }, {
        key: 'closeEditor',
        value: function closeEditor() {
            var _ = this;
            _.in_editor = false;

            $.magnificPopup.close();
            _.focusInput();
        }
    }, {
        key: 'abortEdit',
        value: function abortEdit() {
            if (this.in_editor) {
                this.sendToServer('##ce_abort');
            }
        }
    }, {
        key: 'saveEdit',
        value: function saveEdit(maxLinelen) {

            var _ = this;

            var text = $('#editorTextArea').val().split('\n');

            for (var l = 0; l < text.length; l++) {
                var remText = text[l];
                while (remText.length > 0) {

                    var currline,
                        slicepos = remText.lastIndexOf(' ', maxLinelen);

                    if (slicepos > 0) {
                        currline = remText.slice(0, slicepos) + '\\';
                        remText = remText.slice(slicepos);
                    } else {
                        currline = remText;
                        remText = '';
                    }

                    _.sendToServer('##ce' + currline);
                }
            }
            _.sendToServer('##ce_save');
        }

        /* *****************************************************************************
         *  IMAGES IN OUTPUT 
         */

    }, {
        key: 'showImage',
        value: function showImage(cont, image) {
            var _ = this;
            var imgsrc = _.images_path + '/' + image;
            var currimgsrc = cont.attr('src');

            if (currimgsrc != imgsrc) cont.attr('src', imgsrc);
        }

        /* *****************************************************************************
         * OUTPUT BUTTONS
         */

    }, {
        key: 'pauseOn',
        value: function pauseOn() {
            console.log('pauseON');
            // if(autoscroll_enabled) {
            //     autoscroll_enabled = false;
            //     $('#pausebutton').button("option", "icons", { primary: 'ui-icon-custom-play' });
        }
    }, {
        key: 'pauseOff',
        value: function pauseOff() {
            console.log('pauseOFF');
            // if(!autoscroll_enabled) {
            //     autoscroll_enabled = true;
            //     $('#pausebutton').button("option", "icons", { primary: 'ui-icon-custom-pause' });
            // }
        }

        /* *****************************************************************************
         * ICONS
         */

    }, {
        key: 'tileBgPos',
        value: function tileBgPos(tilenum) {
            var _ = this;
            var tc = _.tileCoords(tilenum);
            return '-' + tc[0] + 'px -' + tc[1] + 'px';
        }
    }, {
        key: 'tileCoords',
        value: function tileCoords(tilenum) {
            var posx = 32 * (tilenum & 0x7f);
            var posy = 32 * (tilenum >> 7);
            return [posx, posy];
        }
    }, {
        key: 'renderIcon',
        value: function renderIcon(icon, mrn, cnttype, cntmrn, cmd, addclass) {
            var _ = this;
            if (!icon) icon = 416;

            return '<div class="iconimg ico_' + icon + ' ' + (addclass ? ' ' + addclass : '') + '" style="background-position:' + _.tileBgPos(icon) + '"' + (mrn ? ' mrn="' + mrn + '"' : '') + (cmd ? ' cmd="' + cmd + '"' : '') + (cnttype ? ' cnttype="' + cnttype + '"' : '') + (cntmrn ? ' cntmrn="' + cntmrn + '"' : '') + '></div>';
        }

        /* *****************************************************************************
         * SKY
         */

    }, {
        key: 'setSky',
        value: function setSky(sky) {
            //let skypos = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'N', 'd', 'e', 'f', 'g', 'i', 'o', 'p', 'q', 'r', 's', 't', 'u', 'w', 'y'];

            /*  5: alba 
                o: mattina
                i: tramonto
                t: neve
                q: mattina nuvolosa
            */
            var skypos = ['o', 'N', 'w', 'i', 't', 'q'];

            console.log('%c' + sky, 'background: red; color: #fff');
            console.log(skypos.indexOf(sky));
            /*    if(sky != 'q' && sky != 'N' && sky !='w' && sky !=5) { //test
                        sky = 'q';
                    }
            */
            $('#sky').css('background-position', '0 -' + skypos.indexOf(sky) * 215 + 'px');
        }

        /* *****************************************************************************
         * DOORS & DIRECTION
         */

    }, {
        key: 'goDir',
        value: function goDir(dir) {

            var _ = this;

            var cmd = void 0;

            if (_.godinvlev == 0 && _.dir_status[dir] == '3') {
                cmd = 'apri ' + _.dir_names[dir];
            } else if (_.godinvlev == 0 && _.dir_status[dir] == '4') {
                cmd = 'sblocca ' + _.dir_names[dir];
            } else {
                cmd = _.dir_names[dir];
            }

            // Do not push into history
            if (cmd) {
                _.sendToServer(cmd);
            }
        }
    }, {
        key: 'setDoors',
        value: function setDoors(doors) {
            var _ = this;
            for (var d = 0; d < _.dir_names.length; ++d) {
                $('#' + _.dir_names[d] + ' .dir-ico').css('background-position', -26 * doors[d]);
            }

            _.dir_status = doors;
        }

        /* *****************************************************************************
         * AUDIO & MUSIC
         */

    }, {
        key: 'playAudio',
        value: function playAudio() {
            console.log('TODO:playaudio');
        }

        /* *****************************************************************************
         * PLAYER STATUS
         */

    }, {
        key: 'updatePlayerStatus',
        value: function updatePlayerStatus(hprc, mprc) {
            var _ = this;
            var hcolor = _.prcLowTxt(hprc, _.hlttxtcol);
            var mcolor = _.prcLowTxt(hprc, _.hlttxtcol);

            $('.movebar').width(_.limitPrc(mprc) + '%');
            $('#moveBarText i').css('color', mcolor).text(mprc);

            $('.healthbar').width(_.limitPrc(hprc) + '%');
            $('#healtBarText i').css('color', hcolor).text(hprc);
        }
    }, {
        key: 'setStatus',
        value: function setStatus(st) {
            //TODO: in combat or not 
            var _ = this;
            _.updatePlayerStatus(st[0], st[1]);
            return '';
        }

        /* *****************************************************************************
         * MAP
         */

    }, {
        key: 'renderDetailsInText',
        value: function renderDetailsInText(info, type) {
            var _ = this;
            var res = '';

            if (info.title) {
                res += '<div class="room"><div class="lts"></div>' + _.capFirstLetter(info.title) + '<div class="rts"></div></div>';
            }
            /* addBannerStyle(capFirstLetter(info.title), 'mini', 'long'); */

            res += _.renderDetailsInner(info, type);

            if (info.image) _.showImage($('#image-cont'), info.image);

            return res;
        }
    }, {
        key: 'renderDetailInSecondOutput',
        value: function renderDetailInSecondOutput(info, type) {
            var _ = this,
                res = '',
                container = $('.tg-output-detail').empty(),
                details = $(_.replaceColors(_.renderDetailsInner(info, '')));

            container.append(details);

            if (type == 'room') {
                if (_.client_update.room.version < info.ver) {
                    _.client_update.room.version = info.ver;
                    _.client_update.room.needed = false;
                }
            }

            return res;
        }
    }, {
        key: 'renderDetails',
        value: function renderDetails(info, type) {
            return this.renderDetailsInText(info, type);
            //return this.renderDetailInSecondOutput(info, type);
        }
    }, {
        key: 'renderDetailsInner',
        value: function renderDetailsInner(info, type) {
            var _ = this;
            var numberClassList = ' firstlist';
            var textarea = '';

            if (info.action) {
                textarea += '<div class="details-inner">' + info.action + '</div>';
            }
            /* Print description */
            if (info.desc) {
                textarea += '<div class="tg-description">';
                if (info.desc.base) {
                    if (type == 'room') {
                        _.last_room_desc = _.formatText(info.desc.base, 'tg-descbase');
                        textarea += _.formatText(info.desc.base, 'tg-descbase');
                    }
                } else if (info.desc.repeatlast && _.last_room_desc) {
                    textarea += _.last_room_desc;
                }
                textarea += '</div>';

                if (info.desc.details) {
                    textarea += _.formatText(info.desc.details, 'tg-yellow d-block tg-character-subdetail');
                }

                if (info.desc.equip) {
                    textarea += _.formatText(info.desc.equip, 'tg-green d-block tg-character-subdetail');
                }
            }

            // if(inDialog) 
            // else 

            /* Print Objects List */
            if (info.objcont) {
                numberClassList = info.perscont ? numberClassList : '';
                textarea += _.renderDetailsList(type, info.num, info.objcont, 'obj', 'tg-yellow tg-list-object' + numberClassList);
            }

            /* Print Persons List */
            if (info.perscont) {
                numberClassList = !info.objcont ? numberClassList : '';
                textarea += _.renderDetailsList(type, info.num, info.perscont, 'pers', 'tg-lt-green tg-list-person' + numberClassList);
            }

            return textarea;
        }
    }, {
        key: 'renderDetailsList',
        value: function renderDetailsList(cont_type, cont_num, cont, type, style) {
            var _ = this;
            var res = '',
                txt = '';

            if (cont.list) {
                if (cont_type == 'pers' || cont_type == 'equip') {
                    cont.list.sort(function (a, b) {
                        /*let eq_pos_a = $.isArray(a.eq) ? pos_to_order[a.eq[0]] : 0;
                        let eq_pos_b = $.isArray(b.eq) ? pos_to_order[b.eq[0]] : 0;
                        return eq_pos_a - eq_pos_b;*/
                        //return (eq_post_a) -  (eq_pos__b = '');
                    });
                }

                for (var n = 0; n < cont.list.length; n++) {
                    var l = cont.list[n];
                    var is_group = (l.mrn && l.mrn.length) > 1;
                    var opened = l.mrn && _.exp_grp_list[l.mrn[l.mrn.length - 1]];
                    var tradd = 'class="tg-element"',
                        tdadd = '';

                    if (is_group) {

                        tradd = ' class="grpcoll" data-mrn="' + l.mrn[l.mrn.length - 1] + '"';

                        if (opened) {
                            tradd += ' style="display:none"';
                        }

                        tdadd += '<div class="expicon"></div>';
                    }

                    txt += '<div ' + tradd + '>';
                    txt += '<div>' + tdadd + '</div>';
                    txt += '<div class="tg-mobicon">' + _.renderIcon(l.icon, l.mrn ? l.mrn[0] : null, cont_type, l.cntnum, null, 'interact ' + type) + '</div>';
                    txt += '<div class="tg-mob-description">' + _.decoratedDescription(l.condprc, l.mvprc, l.wgt, l.sz ? l.sz : 1, (l.eq ? '<b>' + equip_positions_by_num[l.eq[0]] + '</b>: ' : '') + l.desc) + '</div>';
                    txt += '</div>';
                    if (is_group) {
                        txt += '<div class="grpexp"';

                        if (!opened) {
                            txt += ' style="display:none"';
                        }
                        txt += '>';
                        for (var m = 0; m < l.mrn.length; m++) {
                            txt += '<div>' + (m == 0 ? '<div class="collicon"></div>' : '') + '</div><div>' + _.renderIcon(l.icon, l.mrn[m], cont_type, l.cntnum, null, 'interact ' + type) + '</div></div><div>' + _.decoratedDescription(l.condprc, l.mvprc, l.wgt, 1, l.desc) + '</div></div>';
                        }if (l.sz && l.sz > l.mrn.length) txt += '<div><div></div><div><div>' + _.renderIcon(l.icon, null, cont_type, l.cntnum, null, /* 'interact '+type */null) + '</div></div><div>' + _.decoratedDescription(l.condprc, l.mvprc, l.wgt, l.sz - l.mrn.length, l.desc) + '</div></div>';
                        txt += '</div>';
                    }
                }
                if (cont.title && (txt.length > 0 || cont.show === true)) {
                    res += '<p>' + cont.title;
                    if (txt.length == 0) res += '<br>Niente.';
                    res += '</p>';
                }

                if (txt.length > 0) {
                    res += '<div class="tg-outputlist' + (style ? ' ' + style : '') + (_.client_options.details.compact ? ' compact' : '') + '" data-type="' + cont_type + '"' + (cont_num ? '" data-mrn="' + cont_num + '"' : '') + '>' + txt + '</div>';
                }
            }

            return res;
        }
    }, {
        key: 'capFirstLetter',
        value: function capFirstLetter(string) {
            return string.charAt(0).toUpperCase() + string.slice(1);
        }
    }, {
        key: 'formatText',
        value: function formatText(text, style) {
            var page = '';
            var parags = text.replace(/\r/gm, '').replace(/([^.:?!,])\s*\n/gm, '$1 ').split(/\n/);

            $.each(parags, function (i, p) {
                if (p != '') {
                    page += '<div' + (style ? ' class="' + style + '"' : '') + '>' + p + '</div>';
                }
            });

            return page;
        }

        /* *****************************************************************************
         * STATUS BAR
         */

    }, {
        key: 'limitPrc',
        value: function limitPrc(prc) {
            if (prc < 0) prc = 0;else if (prc > 100) prc = 100;

            return prc;
        }
    }, {
        key: 'prcLowTxt',
        value: function prcLowTxt(val, values) {
            for (var i = 0; i < values.length; ++i) {
                if (val <= values[i].val) {
                    return values[i].txt;
                }
                return null;
            }
        }
    }, {
        key: 'prcHighTxt',
        value: function prcHighTxt(val, values) {
            for (var i = 0; i < values.length; ++i) {
                if (val >= values[i].val) return values[i].txt;
            }
            return null;
        }
    }, {
        key: 'sendOOB',
        value: function sendOOB(data) {
            var _ = this;

            if (!_.isConnected) {
                return;
            }
            _.socket.emit('oob', data);
        }
    }, {
        key: 'processCommands',
        value: function processCommands(text, save_history) {
            var _ = this;
            if (_.inGame) {
                var cmds = _.parseInput(text);

                if (cmds) {
                    //check if cmd will be pushed in the history array
                    if (save_history) {
                        _.historyPush(text);
                    }

                    for (var i = 0; i < cmds.length; i++) {
                        _.sendToServer(cmds[i]);
                    }
                }
            } else {
                _.sendToServer(text);
                $('#tgInputUser').val('').focus();
            }
        }
    }, {
        key: 'parseInput',
        value: function parseInput(input) {

            var _ = this;
            /* Split input separated by ; */
            var inputs = input.split(/\s*;\s*/);
            var res = [];

            /* Substitute shortcuts on each command and join results */
            for (var i = 0; i < inputs.length; ++i) {
                var subs = _.substShort(inputs[i]).split(/\s*;\s*/);
                res = res.concat(subs);
            }

            /* Return the resulting array */
            return res;
        }
    }, {
        key: 'substShort',
        value: function substShort(input) {

            var _ = this;
            // Split into arguments
            var args = input.split(/\s+/);

            // Get the shortcut index
            var shortcut_key = args.shift();
            var shortcut_num = parseInt(shortcut_key);
            var shortcut_cmd = void 0;
            if (!isNaN(shortcut_num)) shortcut_cmd = _.client_options.shortcuts[shortcut_num];else if (typeof _.shortcuts_map[shortcut_key] != 'undefined') shortcut_cmd = _.client_options.shortcuts[_.shortcuts_map[shortcut_key]];

            // Check if the shortcut is defined
            if (shortcut_cmd) {
                // Use the shortcut text as command
                input = shortcut_cmd.cmd;

                if (/\$\d+/.test(input)) {
                    // Substitute the arguments
                    for (var arg = 0; arg < args.length; ++arg) {
                        var rx = new RegExp("\\$" + (arg + 1), 'g');
                        input = input.replace(rx, args[arg]);
                    }

                    // Remove remaining variables
                    input = input.replace(/\$\d+/g, '');
                } else input += " " + args.join(" ");
            }

            if (_.cmd_prefix.length > 0) input = _.cmd_prefix + " " + input;

            return input;
        }

        /* *****************************************************************************
         * COMMAND HISTORY
         */

    }, {
        key: 'updateInput',
        value: function updateInput() {
            var _ = this;
            var text = _.cmd_history[_.cmd_history_pos] ? _.cmd_history[_.cmd_history_pos] : '';
            $('#tgInputUser').val(text).focus();
        }
    }, {
        key: 'historyUp',
        value: function historyUp() {
            var _ = this;
            if (_.cmd_history_pos > 0) {
                _.cmd_history_pos--;
                _.updateInput();
            }
        }
    }, {
        key: 'historyDown',
        value: function historyDown() {
            var _ = this;
            if (_.cmd_history_pos < _.cmd_history.length) {
                _.cmd_history_pos++;
                _.updateInput();
            }
        }
    }, {
        key: 'historyPush',
        value: function historyPush(text) {
            var _ = this;
            if (text.length > 0) {
                if (_.cmd_history.length >= _.max_history_length) _.cmd_history.shift();

                if (_.cmd_history.length == 0 || _.cmd_history[_.cmd_history.length - 1] != text) _.cmd_history.push(text);

                _.cmd_history_pos = _.cmd_history.length;
            }

            $('#tgInputUser').val('');

            return text;
        }
    }, {
        key: 'sendToServer',
        value: function sendToServer(text) {
            var _ = this;
            if (!_.isConnected) {
                return;
            }

            _.socket.emit('data', text);
        }
    }, {
        key: 'getLoginReplyMessage',
        value: function getLoginReplyMessage(what) {
            var login_reply_message = {
                'serverdown': 'Il server di gioco è momentaneamente spento. Riprova più tardi.',
                'errorproto': 'Errore di comunicazione con il server.',
                'errornonew': 'In questo momento non è permessa la creazione di nuovi personaggi.',
                'invalidname': 'Nome non valido.',
                'invalidpass': 'Password non valida.',
                'loginerror': 'Personaggio inesistente o password errata.',
                'staffonly': 'In questo momento solo lo staff può collegarsi, riprova più tardi.',
                'plrreaderror': 'Errore di lettura del personaggio.',
                'plrdisabled': 'Il personaggio è stato disattivato.',
                'bannedip': 'Connessione da un indirizzo bloccato.',
                'maxclients': 'Il server ha raggiunto il massimo numero di connessioni, riprova più tardi.',
                'errorcoderequired': 'Per creare un altro personaggio ti serve un codice di attivazione.',
                'errorinvalidcode': 'Il codice di invito inserito non è valido. Verifica di averlo digitato correttamente.',
                'dupname': 'Esiste già un personaggio con questo nome. Per favore scegli un nome diverso.',
                'invalidemail': 'L\'indirizzo di email inserito non è valido.'
            };

            return login_reply_message[what];
        }
    }, {
        key: 'showOutput',
        value: function showOutput(text) {

            $('#output').append(text);

            var outputHeigt = $('#output').height();
            $('#scrollableOutput').scrollTop(outputHeigt);
        }
    }, {
        key: 'clearOutput',
        value: function clearOutput() {
            $('#output').empty();
        }

        //check status of interface Data after first login.

    }, {
        key: 'interfaceUpdateStatus',
        value: function interfaceUpdateStatus() {
            var _ = this;
            if (_.client_update.interfaceData.info && _.client_update.interfaceData.stato) {
                return true;
            }
        }
    }, {
        key: 'loadInterface',
        value: function loadInterface() {

            var _ = this;

            $('.tg-main').addClass('d-flex');

            /* Interface Modules List */
            _.genericEvents();
            _.mainNavBarInit();
            _.tooltipInit();
            _.inputInit();
            _.outputInit();
            _.keyboardMapInit();
            _.focusInput();
            _.mapInit();
            _.doorsInit();
            _.buttonsEventInit();
            _.main();
        }

        /* -------------------------------------------------
         * MAIN NAVBAR
         * -------------------------------------------------*/

    }, {
        key: 'mainNavBarInit',
        value: function mainNavBarInit() {
            var _ = this;
            /* Search Widget form */
            _.initSearchWidget();
        }
    }, {
        key: 'initSearchWidget',
        value: function initSearchWidget() {

            var options = {
                url: "ajax/cmd_list_guide.json",
                getValue: "name",
                list: {
                    match: {
                        enabled: true,
                        onClickEvent: function onClickEvent(element) {
                            alert("Non è stata inserita alcuna guida per " + element.name);
                        }
                    }
                },
                theme: "square"
            };

            $('#tgSearchInput').easyAutocomplete(options);

            $('#tgSearchHelp').on('submit', function (e) {
                e.preventDefault();
                _.openPopup('nofeature');
            });
        }

        /* -------------------------------------------------
         * TOOLTIP
         * -------------------------------------------------*/

    }, {
        key: 'tooltipInit',
        value: function tooltipInit() {
            $('body').tooltip({
                selector: '[rel="tooltip"]',
                html: true,
                delay: { 'show': 500, 'hide': 0 }
            });
        }

        /* -------------------------------------------------
        * INPUT
        * -------------------------------------------------*/

    }, {
        key: 'inputInit',
        value: function inputInit() {
            var _ = this;
        }

        /* -------------------------------------------------
         * OUTPUT
         * -------------------------------------------------*/

    }, {
        key: 'outputInit',
        value: function outputInit() {
            var selector = '#scrollableOutput';
            this.addScrollBar(selector);
        }

        /* -------------------------------------------------
         * KEYBOARD MAP
         * -------------------------------------------------*/

    }, {
        key: 'keyboardMapInit',
        value: function keyboardMapInit() {

            var _ = this;

            if (!_.isConnected) {
                return true;
            }

            $('#tgMap').mouseenter(function () {
                _.cursor_on_map = true;
            });

            $('#tgMap').mouseleave(function () {
                _.cursor_on_map = false;
            });

            $(document).on('keydown', function (event) {

                // if is not connected?
                if (!_.isConnected, _.in_editor) {
                    return true;
                };

                if (event.metaKey || event.ctrlKey) {
                    return true;
                }

                /* Stop event Listener if we are inside Modal  */
                if (_.in_editor) {
                    return true;
                }
                if (event.altKey || _.cursor_on_map) {

                    switch (event.which) {
                        case 33:
                            _.goDir(_.dir_up);
                            return false;
                        case 34:
                            _.goDir(_.dir_down);
                            return false;

                        case 37:
                            _.goDir(_.dir_west);
                            return false;

                        case 38:
                            _.goDir(_.dir_north);
                            return false;

                        case 39:
                            _.goDir(_.dir_east);
                            return false;

                        case 40:
                            _.goDir(_.dir_south);
                            return false;
                    }
                }
                if ($(event.target).is('#tgInputUser') === true) {
                    /* ENTER key, handle here */
                    if (event.which == 13) {
                        _.sendInput();
                        return false;
                    }

                    /* "!" alias  to send last command */
                    if (event.which == 49 && event.shiftKey === true && $(event.target).val().length == 0) {
                        var l = _.cmd_history.length;

                        if (l > 0) _.processCommands(_.cmd_history[l - 1]);
                        return false;
                    }

                    /* Enter Key */
                    switch (event.which) {
                        case 13:
                            _.sendInput();
                            return true;
                        //Arrow UP
                        case 38:
                            _.historyUp();
                            event.preventDefault();
                            return true;
                        //Arrow DOWN
                        case 40:
                            _.historyDown();
                            event.preventDefault();
                            return true;
                    }
                }
                return true;
            });
        }

        /* -------------------------------------------------
         *  MAP 
         * -------------------------------------------------*/

    }, {
        key: 'mapInit',
        value: function mapInit() {
            var _ = this;
            _.MAP_OBJECT = new _mapDrawer2.default();
            _.MAP_OBJECT.init();
            _.MAP_OBJECT.prepareCanvas(_.images_path);
        }

        /* -------------------------------------------------
         *  DOORS 
         * -------------------------------------------------*/

    }, {
        key: 'doorsInit',
        value: function doorsInit() {
            var _ = this;
            for (var d = 0; d < _.dir_names.length; ++d) {
                $('#' + _.dir_names[d]).on('click', {
                    dir: d
                }, function (event) {

                    if (_.inGame) {
                        if (event.which == 1) {
                            _.goDir(event.data.dir);
                        } else if (event.which == 3) {
                            event.preventDefault();
                            _.closeLockDoor(event.data.dir);
                        }
                    }
                });
            }
        }

        /* -------------------------------------------------
         *  Buttons Events
         * -------------------------------------------------*/

    }, {
        key: 'buttonsEventInit',
        value: function buttonsEventInit() {
            var _ = this;

            /* Buttons with CMD event */
            var cmdButtons = [{ id: '#userDisconnect', cmd: function cmd() {
                    disconnectFromServer();
                } }];

            $.each(cmdButtons, function (idx, bdata) {
                var button = $(bdata.id);

                if (bdata.cmd) {
                    button.on('click', typeof bdata.cmd == 'function' ? bdata.cmd : function () {
                        if (_.inGame) {
                            _.processCommands(bdata.cmd);
                        }
                        if (bdata.text) {
                            //TODO open modal by reference
                        }
                    });
                }
            });

            /* Toggle character panel  Display */
            $('#triggerToggleCharacterPanel').on('click', function () {

                if (_.client_options.interface.dashboard == 0) {

                    $('.tg-dashboard').addClass('midopen');
                    _.client_options.interface.dashboard = 1;

                    return;
                }

                if (_.client_options.interface.dashboard == 1 || _.client_options.interface.dashboard == 2) {
                    _.client_options.interface.dashboard = _.client_options.interface.dashboard == 1 ? 2 : 0;

                    $('.tg-characterpanel').slideToggle(300, function () {
                        var outputHeigt = $('#output').height();
                        $('#scrollableOutput').animate({
                            scrollTop: outputHeigt
                        }, 500, 'linear');
                        $('.tg-dashboard').removeClass('midopen');
                    });
                }
            });

            //Expand tg-area
            $('#triggerExpandTgArea').on('click', function () {
                $('.tg-area').toggleClass('expanded', function () {});
                setTimeout(function () {
                    var outputHeigt = $('#output').height();
                    $('#scrollableOutput').animate({
                        scrollTop: outputHeigt
                    }, 500, 'linear');
                }, 200);
            });
        }

        /* -------------------------------------------------
         *  Generic Events
         * -------------------------------------------------*/

    }, {
        key: 'genericEvents',
        value: function genericEvents() {
            var _ = this;
            $('.no-feature').on('click', function (e) {
                e.preventDefault();
                _.openPopup('nofeature');
            });
        }
    }, {
        key: 'sendInput',
        value: function sendInput() {
            var inputVal = $('#tgInputUser').val();
            this.processCommands(inputVal, true);
        }
    }, {
        key: 'focusInput',
        value: function focusInput() {
            $('#tgInputUser').focus();
        }

        /* -------------------------------------------------
         *  POPUP
         * -------------------------------------------------*/

    }, {
        key: 'openPopup',
        value: function openPopup(content_ref, title, content) {

            var _ = this;

            var MP_type = 'inline',
                MP_close_button = false,
                MP_closeOnBgClick = false,
                MP_src = content,
                MP_callbacks = {};

            switch (content_ref) {
                /* Cookie Law */
                case 'cookielaw':
                    MP_type = 'ajax';
                    MP_src = './ajax/cookielawAlert.html';
                    break;

                /* ALPHA Client Version ALERT */
                case 'alpha_version':
                    if (_.client_options.alpha_approved) {
                        return;
                    }
                    MP_src = 'ajax/alphaModalAlert.html';
                    MP_type = 'ajax';
                    break;
                case 'nofeature':
                    MP_type = 'inline';
                    MP_closeOnBgClick = true;
                    MP_close_button = true;
                    MP_src = '<div class="tg-modal">Funzionalità non ancora implementata</div>';
                    break;

                case 'notizie':
                    MP_close_button = true;
                    MP_src = '<div class="tg-modal">zona notizie</div>';
                    MP_callbacks.close = function () {
                        _.sendInput();
                    };
                    break;

                case 'editor':
                    MP_src = '#editorDialog';
                    MP_close_button = true, MP_callbacks.open = function () {
                        $('.mfp-close').on('click', function (event) {
                            event.preventDefault();
                            _.abortEdit();
                            $.magnificPopup.close();
                        });
                    };
                    MP_callbacks.close = function (e) {
                        _.closeEditor();
                    };
                    break;

                default:
                    //TODO: make default value to avoid error.

                    break;
            }

            // Open Modal / Popup
            $.magnificPopup.open({
                showCloseBtn: MP_close_button,
                closeOnBgClick: MP_closeOnBgClick,
                type: MP_type,
                preloader: false,
                items: {
                    src: MP_src,
                    type: MP_type
                },
                mainClass: 'modal-' + content_ref,
                callbacks: MP_callbacks
            });
            //add Draggable
            $($.magnificPopup.instance.contentContainer).draggabilly({
                handle: '.tg-modal-title',
                containment: '.tg-area'
            });

            return $.magnificPopup.instance;
        }
    }, {
        key: 'addScrollBar',
        value: function addScrollBar(container) {
            this.scrollbar.output = new _perfectScrollbar2.default(container, {
                wheelPropagation: 2
            });
        }

        // UTILITY

    }, {
        key: 'isModalOpen',
        value: function isModalOpen() {
            return $.magnificPopup.instance.isOpen;
        }
    }, {
        key: 'main',
        value: function main() {}
    }]);

    return TgGui;
}();

exports.default = TgGui;

/***/ }),

/***/ "./js/modules/mapDrawer.js":
/*!*********************************!*\
  !*** ./js/modules/mapDrawer.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var MapDrawer = function () {
    function MapDrawer() {
        _classCallCheck(this, MapDrawer);

        this.container = '#tgMap';
        this.maxmapwidth = 9;
        this.maxmapheight = 9;
        this.maptilewidth = 32;
        this.maptileheight = 32;
        this.maplight;
        this.mapidprefix = 'mp';
        this.MAPCTX = null;
        this.maptileimg = null;
        this.mapshadowimg = [];
        this.MAPRAIN = null;
        this.MAPSNOW = null;
        this.mapfogimg = null;
        this.cursoronmap = false;
        // this.mapsizedata = {
        //     'map_n':{ dialogClass:null, width: 360, height: 375 },
        //     'map_m':{ dialogClass:'small', width: 287, height: 295 },
        //     'map_s':{ dialogClass:'tiny', width: 216, height: 225 }
        // };

        this.layermap = null;
    }

    _createClass(MapDrawer, [{
        key: 'init',
        value: function init() {
            var _ = this;

            _.layermap = new Array(_.maxmapheight);

            for (var y = 0; y < _.maxmapheight; ++y) {
                _.layermap[y] = new Array(_.maxmapwidth);
            }
        }
    }, {
        key: 'prepareCanvas',
        value: function prepareCanvas(imagesPath) {
            var _ = this;

            $(_.container).append('<canvas id="mapcont" width="' + _.maxmapwidth * _.maptilewidth + '" height="' + _.maxmapheight * _.maptileheight + '"></canvas>');

            _.MAPCTX = $('#mapcont')[0].getContext('2d');

            //Base Tiles
            _.maptileimg = new Image();
            _.maptileimg.src = imagesPath + '/tiles/tiles.png';

            // // Fog
            // _.mapfogimg = new Image();
            // _.mapfogimg.src = "<%= image_url_from_assets_file('interface/map/fog.png') %>";

            // // Rain
            //_.makeRain();
            // Snow
            _.makeSnow();
            // Shadows
            _.mapshadowimg[2] = new Image();
            _.mapshadowimg[2].src = imagesPath + '/interface/shadow1.png';

            _.mapshadowimg[1] = new Image();
            _.mapshadowimg[1].src = imagesPath + '/interface/shadow2.png';

            _.mapshadowimg[0] = new Image();
            _.mapshadowimg[0].src = imagesPath + '/interface/shadow3.png';

            _.mapshadowtile = new Image();
            _.mapshadowtile.src = imagesPath + '/interface/shadowtile.png';
        }
    }, {
        key: 'updateMap',
        value: function updateMap(map) {
            this.drawCanvasMap(map);
        }
    }, {
        key: 'drawCanvasMap',
        value: function drawCanvasMap(map) {
            var _ = this;
            var xoff = void 0,
                yoff = void 0,
                xlim = void 0,
                ylim = void 0,
                light = void 0,
                canvaswidth = void 0,
                canvasheight = void 0;
            //clip options
            var radius = 75;
            var offset = 0;

            xoff = (_.maxmapwidth - map.d) / 2;
            yoff = (_.maxmapheight - map.d) / 2;
            xlim = xoff + map.d;
            ylim = yoff + map.d;

            canvaswidth = _.maxmapwidth * _.maptilewidth;
            canvasheight = _.maxmapheight * _.maptileheight;

            /* Clear the canvas*/
            _.MAPCTX.clearRect(0, 0, canvaswidth, canvasheight);

            /* Cycle on the 2 layers */
            for (var l = 0; l < 2; l++) {
                var pos = 0;
                for (var y = 0; y < _.maxmapwidth; y++) {
                    for (var x = 0; x < _.maxmapheight; x++) {
                        if (x >= xoff && x < xlim && y >= yoff && y < ylim) _.layermap[y][x] = map.data[l][pos++];else {
                            _.layermap[y][x] = 59;
                        }
                    }
                }

                for (var _y = 0; _y < _.maxmapwidth; _y++) {
                    for (var _x = 0; _x < _.maxmapheight; _x++) {
                        var d = _.layermap[_y][_x];
                        if (d != 59) {
                            var tpos = _.tileCoords(d);
                            //Draw image before Clip
                            //_.MAPCTX.save();
                            //_.MAPCTX.beginPath();
                            // _.MAPCTX.arc(canvaswidth / 2, canvasheight / 2, canvaswidth, 0, 2 * Math.PI, false);
                            // _.MAPCTX.clip();
                            _.MAPCTX.drawImage(_.maptileimg, tpos[0], tpos[1], _.maptilewidth, _.maptilewidth, _x * _.maptilewidth, _y * _.maptileheight, _.maptilewidth, _.maptileheight);
                        }
                    }
                }

                if (l == 0) {
                    for (var _y2 = 0; _y2 < _.maxmapwidth; _y2++) {
                        for (var _x2 = 0; _x2 < _.maxmapheight; _x2++) {
                            if (_.layermap[_y2][_x2] == 59) {
                                var clipx = 0,
                                    clipy = 0,
                                    swidth = 48,
                                    sheight = 48;

                                if (_y2 == 0 || _.layermap[_y2 - 1][_x2] == 59) {
                                    clipy = 8;
                                    sheight -= 8;
                                }

                                if (_y2 == _.maxmapheight - 1 || _.layermap[_y2 + 1][_x2] == 59) {
                                    sheight -= 8;
                                }

                                if (_x2 == 0 || _.layermap[_y2][_x2 - 1] == 59) {
                                    clipx = 8;
                                    swidth -= 8;
                                }

                                if (_x2 == _.maxmapwidth - 1 || _.layermap[_y2][_x2 + 1] == 59) {
                                    swidth -= 8;
                                }
                                _.MAPCTX.drawImage(_.mapshadowtile, clipx, clipy, swidth, sheight, _x2 * _.maptilewidth - 8 + clipx, _y2 * _.maptileheight - 8 + clipy, swidth, sheight);
                            }
                        }
                    }
                }
            }

            if (_.mapshadowimg[map.l]) {
                _.MAPCTX.drawImage(_.mapshadowimg[map.l], 96 - 32 * map.l, 96 - 32 * map.l);
            }

            // if(map.f) {
            //     _.MAPCTX.drawImage(mapfogimg, 0, 0);
            // }

            if (map.r) {
                $('#rainCanvas').show();
            } else {
                $('#rainCanvas').hide();
            }

            if (map.s) {
                $('#snowCanvas').show();
            } else {
                $('#snowCanvas').hide();
            }
        }
    }, {
        key: 'tileCoords',
        value: function tileCoords(tilenum) {
            var posx = 32 * (tilenum & 0x7f);
            var posy = 32 * (tilenum >> 7);
            return [posx, posy];
        }
    }, {
        key: 'makeSnow',
        value: function makeSnow() {

            /* --- config start --- */

            var snowCanvasId = "snowCanvas",
                // id of the canvas to use
            framerate = 40,
                // which fps rate to use, this is not followed exactly
            flakeNumberModifier = 1.0,
                // change this to change the number of flakes
            fallSpeedModifier = 0.5; // falling speed

            /* ---- config end ---- */

            var canvas = document.getElementById(snowCanvasId),
                context = canvas.getContext("2d"),
                width = canvas.width,
                height = canvas.height,
                numFlakes = Math.min(width, 300) * height / 400 * flakeNumberModifier,
                flakes = [],
                TWO_PI = Math.PI * 2,
                radHeight = 40;
            var flake = document.createElement("CANVAS"),
                flakeContext = flake.getContext("2d");

            // create flake grafic
            flake.width = 8;
            flake.height = 8;
            flakeContext.fillStyle = "#fff";
            flakeContext.beginPath();
            flakeContext.arc(4, 4, 4, 0, TWO_PI);
            flakeContext.fill();

            // init snowflakes
            for (var x = 0; x < numFlakes; x++) {
                flakes[x] = getRandomFlake(true);
            }

            // start tick at specified fps
            window.setInterval(tick, Math.floor(1000 / framerate));

            // main routine
            function tick() {
                var posX = 0,
                    imageData = void 0;

                // reset canvas for next frame
                context.clearRect(0, 0, width, height);

                for (var _x3 = 0; _x3 < numFlakes; _x3++) {
                    // calculate changes to snowflake
                    posX = flakes[_x3].x + Math.sin(flakes[_x3].yMod + flakes[_x3].y / radHeight * (5 - flakes[_x3].size)) * flakes[_x3].waveSize * (1 - flakes[_x3].size);
                    flakes[_x3].y += flakes[_x3].size * fallSpeedModifier; // bigger flakes are nearer to screen, thus they fall faster to create 3d effect

                    // if snowflake is out of bounds, reset
                    if (flakes[_x3].y > height + 5) {
                        flakes[_x3] = getRandomFlake();
                    }

                    // draw snowflake
                    context.globalAlpha = (flakes[_x3].size - 1) / 3;
                    context.drawImage(flake, posX, flakes[_x3].y, flakes[_x3].size, flakes[_x3].size);
                }

                // repeat 300px wide strip with snowflakes to fill whole canvas
                if (width > 300) {
                    context.globalAlpha = 1;
                    context.drawImage(canvas, 300, 0);
                    if (width > 600) context.drawImage(canvas, 600, 0);
                    if (width > 1200) context.drawImage(canvas, 1200, 0);
                    if (width > 2400) context.drawImage(canvas, 2400, 0);
                }
            }

            // randomize flake data
            function getRandomFlake(init) {
                return {
                    x: range(10, 310),
                    y: init ? range(-5, height + 5) : -5,
                    size: Math.max(range(1, 4), 2),
                    yMod: range(0, 150),
                    waveSize: range(1, 4)
                };
            }

            // get a random number inside a range
            function range(start, end) {
                return Math.random() * (end - start) + start;
            }
        }
    }, {
        key: 'makeRain',
        value: function makeRain() {
            var _ = this;
            _.MAPRAIN = $('#rainCanvas')[0];
            var w = $('#rainCanvas').innerWidth();
            var h = $('#rainCanvas').innerHeight();
            console.log(_.MAPRAIN.getContext);
            _.MAPRAIN = _.MAPRAIN.getContext('2d');
            _.MAPRAIN.strokeStyle = 'rgba(174,194,224,0.5)';
            _.MAPRAIN.lineWidth = 1;
            _.MAPRAIN.lineCap = 'round';

            var init = [];
            var maxParts = 1000;
            for (var a = 0; a < maxParts; a++) {
                init.push({
                    x: Math.random() * w,
                    y: Math.random() * h,
                    l: Math.random() * 1,
                    xs: -4 + Math.random() * 4 + 2,
                    ys: Math.random() * 10 + 10
                });
            }

            var particles = [];
            for (var b = 0; b < maxParts; b++) {
                particles[b] = init[b];
            }

            function draw() {
                _.MAPRAIN.clearRect(0, 0, w, h);
                for (var c = 0; c < particles.length; c++) {
                    var p = particles[c];
                    _.MAPRAIN.beginPath();
                    _.MAPRAIN.moveTo(p.x, p.y);
                    _.MAPRAIN.lineTo(p.x + p.l * p.xs, p.y + p.l * p.ys);
                    _.MAPRAIN.stroke();
                }
                move();
            }

            function move() {
                for (var _b = 0; _b < particles.length; _b++) {
                    var p = particles[_b];
                    p.x += p.xs;
                    p.y += p.ys;
                    if (p.x > w || p.y > h) {
                        p.x = Math.random() * w;
                        p.y = -20;
                    }
                }
            }
            setInterval(draw, 30);
        }
    }]);

    return MapDrawer;
}();

exports.default = MapDrawer;

/***/ }),

/***/ "./js/modules/preloader.js":
/*!*********************************!*\
  !*** ./js/modules/preloader.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Preloader = function () {
    function Preloader(assets, basepath) {
        _classCallCheck(this, Preloader);

        this.basepath = basepath;
        this.assetsList = assets;
    }

    _createClass(Preloader, [{
        key: 'init',
        value: function init() {
            var _ = this;

            return new Promise(function (resolve, reject) {
                if (!_.assetsList) {
                    reject('TG Error: Assets List mancante');
                }

                $('body').attr('data-loginstatus', 'preload');

                _.loadAssets().done(function (images) {
                    // All Images loaded
                    $(document.body).attr('data-loginstatus', 'ready');
                    $('#tgPreloader').remove();
                    resolve();
                });
            });
        }
    }, {
        key: 'loadAssets',
        value: function loadAssets() {
            var _ = this;
            var percentage = 0;
            var stepSize = 100 / _.assetsList.length;

            var images = [],
                loadedimages = 0,
                postaction = function postaction() {},
                assets = _typeof(_.assetsList) != "object" ? [_.assetsList] : _.assetsList;

            function imageloadpost() {

                percentage = Math.floor(percentage + stepSize);
                if (loadedimages == assets.length - 1) {
                    percentage = 100;
                }
                $('#tgPreloader').find('span').text(percentage);
                $('.pbar').css('width', percentage + '%');

                loadedimages++;

                if (loadedimages == assets.length) {
                    postaction(images); //call postaction and pass in newimages array as parameter
                }
                $('#tgPreloader').find('span').text(percentage);
            }

            for (var i = 0; i < assets.length; i++) {
                images[i] = new Image();
                images[i].src = _.basepath + assets[i];
                images[i].onload = function () {
                    imageloadpost();
                };
                images[i].onerror = function () {
                    imageloadpost();
                };
            }

            return { //return blank object with done() method
                done: function done(f) {
                    postaction = f || postaction; //remember user defined callback functions to be called when images load
                }
            };
        }

        /* Complete list of fun random phrases that will be shown during the preload */
        // randomizeFunnyText(count) {
        //     let phrases = [
        //         'Prima Frase',
        //         '2 Frase',
        //         '3 Frase',
        //         '4 Frase',
        //         '5 Frase',
        //         '6 Frase',
        //         '7 Frase',
        //         '8 Frase'
        //     ];

        //     let m = phrases.length, 
        //         t, i;
        //     // While there remain elements to shuffle…
        //     while (m) {
        //         // Pick a remaining element
        //         i = Math.floor(Math.random() * m--);
        //         // And swap it with the current element.
        //         t = array[m];
        //         phrases[m] = phrases[i];
        //         phrases[i] = t;
        //     }

        //     let candidatePhrases = phrases.slice.slice(0, 4);
        //     console.log(candidatePhrases);
        // }

    }]);

    return Preloader;
}();

exports.default = Preloader;

/***/ }),

/***/ 0:
/*!********************!*\
  !*** ws (ignored) ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ "jquery":
/*!*************************!*\
  !*** external "jQuery" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_jquery__;

/***/ })

/******/ });
});
//# sourceMappingURL=app.min.js.map